package designpattern.singletonpattern;

/**
 * 单例模式
 * <p>
 * 有些对象我们只需要一个 比如 线程池 缓存 对话框 处理偏好设置和注册表的对象
 * 日志对象 充当打印机、显卡等设备的驱动程序的对象
 * <p>
 * 确保只有一个实例会被创建
 * 提供方便的全局访问点
 * 需要时再创建，没有全局变量的缺点——没用到也一开始就启动
 */
public class SingletonTest {
    /*
    多个类加载器class loader 会各自创建自己的单件实现
    因为每个类加载器有自己的命名空间
    所以要指定一个类加载器来加载，并且每次要指定同一个

    垃圾回收会吃掉 只有自己引用自己的对象，所以1.2以前 要建立单件注册表
    但单件不会，所以java1.2之后就不会有这个bug

    单件 不仅管理自己的实例，还充当角色

    因为单件的构造器是私有的，所以严格的单件是不能继承的

    全局变量可以提供全局访问，但不能确保只有一个实例，比如被别的重写了
    而且会指向很多小对象污染命名空间

    单件模式 三要素 私有的构造器 一个静态方法 一个静态变量

    根据性能和资源限制 选择实现方案
    必须认定所有的程序都是多线程的
     */
}
